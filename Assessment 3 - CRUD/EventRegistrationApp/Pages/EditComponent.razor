@page "/edit-event/{EventId:int}"
@using EventRegistrationApp.Models
@inject ApiService ApiService
@inject NavigationManager NavigationManager

<h2 class="text-2xl font-bold mb-6">Edit Event</h2>

<EditForm Model="@eventToEdit" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="bg-white p-6 rounded-lg shadow-lg">
        <div class="mb-4">
            <label for="eventName" class="block text-sm font-medium text-gray-700">Event Name</label>
            <InputText id="eventName" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm" @bind-Value="eventToEdit.EventName" />
            <ValidationMessage For="@(() => eventToEdit.EventName)" />
        </div>

        <div class="mb-4">
            <label for="eventDate" class="block text-sm font-medium text-gray-700">Event Date</label>
            <InputDate id="eventDate" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm" @bind-Value="eventToEdit.EventDate" />
            <ValidationMessage For="@(() => eventToEdit.EventDate)" />
        </div>

        <div class="mb-4">
            <label for="eventTime" class="block text-sm font-medium text-gray-700">Event Time</label>
            <InputText id="eventTime" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm" @bind-Value="eventToEdit.EventTime" />
            <ValidationMessage For="@(() => eventToEdit.EventTime)" />
        </div>

        <div class="mb-4">
            <label for="location" class="block text-sm font-medium text-gray-700">Location</label>
            <InputText id="location" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm" @bind-Value="eventToEdit.Location" />
            <ValidationMessage For="@(() => eventToEdit.Location)" />
        </div>

        <div class="mb-4">
            <label for="category" class="block text-sm font-medium text-gray-700">Category</label>
            <InputText id="category" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm" @bind-Value="eventToEdit.Category" />
            <ValidationMessage For="@(() => eventToEdit.Category)" />
        </div>

        <div class="mb-4">
            <label for="description" class="block text-sm font-medium text-gray-700">Description</label>
            <InputTextArea id="description" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm" @bind-Value="eventToEdit.Description" />
            <ValidationMessage For="@(() => eventToEdit.Description)" />
        </div>

        <div class="mb-4">
            <label for="availableSeats" class="block text-sm font-medium text-gray-700">Available Seats</label>
            <InputNumber id="availableSeats" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm" @bind-Value="eventToEdit.AvailableSeats" />
            <ValidationMessage For="@(() => eventToEdit.AvailableSeats)" />
        </div>

        <div class="mb-4">
            <button type="submit" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                Save Changes
            </button>
            <button type="button" @onclick="CancelEdit" class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-100">
                Cancel
            </button>
        </div>
    </div>
</EditForm>

<!-- Redesigned Success Modal -->
<div class="fixed z-10 inset-0 overflow-y-auto" style="display:@(showSuccessModal ? "block" : "none");">
    <div class="flex items-center justify-center min-h-screen px-4 text-center sm:block sm:p-0">
        <div class="fixed inset-0 transition-opacity" aria-hidden="true">
            <div class="absolute inset-0 bg-gray-500 opacity-75"></div>
        </div>
        <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
        <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
            <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div class="sm:flex sm:items-start">
                    <div class="mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-green-100 sm:mx-0 sm:h-10 sm:w-10">
                        <svg class="h-6 w-6 text-green-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                        </svg>
                    </div>
                    <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left">
                        <h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-title">Success</h3>
                        <div class="mt-2">
                            <p class="text-sm text-gray-500">The event was successfully updated.</p>
                        </div>
                    </div>
                </div>
            </div>
            <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                <button type="button" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:ml-3 sm:w-auto sm:text-sm" @onclick="ConfirmUpdates">Ok</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public int EventId { get; set; }
    private EventModel eventToEdit = new();
    private bool showSuccessModal = false;

    protected override async Task OnInitializedAsync()
    {
        eventToEdit = await ApiService.GetEventByIdAsync(EventId);
    }

    private async Task HandleValidSubmit()
    {
        var content = new MultipartFormDataContent();
        content.Add(new StringContent(eventToEdit.EventId.ToString()), "EventId");
        content.Add(new StringContent(eventToEdit.EventName), "EventName");
        content.Add(new StringContent(eventToEdit.EventDate.ToString("yyyy-MM-ddTHH:mm:ss")), "EventDate");
        content.Add(new StringContent(eventToEdit.Location), "Location");
        content.Add(new StringContent(eventToEdit.EventTime), "EventTime");
        content.Add(new StringContent(eventToEdit.AvailableSeats.ToString()), "AvailableSeats");
        content.Add(new StringContent(eventToEdit.Description), "Description");
        content.Add(new StringContent(eventToEdit.Category), "Category");

        var response = await ApiService.UpdateEventAsync(eventToEdit.EventId, content);

        if (response.IsSuccessStatusCode)
        {
            showSuccessModal = true;
        }
        else
        {
            // Handle the error response
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Error updating event: {error}");
        }
    }

    private void ConfirmUpdates()
    {
        showSuccessModal = false;
        NavigationManager.NavigateTo("/admin", true);
    }

    private void CancelEdit()
    {
        NavigationManager.NavigateTo("/admin"); // Redirect to event list or any other page
    }
}
