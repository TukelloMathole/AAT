@page "/book-event/{EventId:int}"
@using EventRegistrationApp.Models
@inject ApiService ApiService
@inject NavigationManager NavigationManager

<h2 class="text-2xl font-bold mb-6">Book Event</h2>

@if (eventDetails == null)
{
    <p><em>Loading event details...</em></p>
}
else
{
    <div class="bg-white p-6 rounded-lg shadow-lg mb-6">
        <h3 class="text-2xl font-semibold mb-2">@eventDetails.EventName</h3>
        <p class="text-gray-600 mb-2">Date: @eventDetails.EventDate.ToString("d MMM yyyy")</p>
        <p class="text-gray-600 mb-2">Location: @eventDetails.Location</p>
        <p class="text-gray-600 mb-2">Time: @eventDetails.EventTime</p>
        <p class="text-gray-600 mb-4">Available Seats: @eventDetails.AvailableSeats</p>
        <p class="text-gray-700">@eventDetails.Description</p>
    </div>

    <EditForm Model="@bookingModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="bg-white p-6 rounded-lg shadow-lg">
            <div class="mb-4">
                <label for="fullName" class="block text-sm font-medium text-gray-700">Full Name</label>
                <InputText id="fullName" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm" @bind-Value="bookingModel.FullName" />
                <ValidationMessage For="@(() => bookingModel.FullName)" />
            </div>

            <div class="mb-4">
                <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
                <InputText id="email" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm" @bind-Value="bookingModel.Email" />
                <ValidationMessage For="@(() => bookingModel.Email)" />
            </div>

            <div class="mb-4">
                <label for="phoneNumber" class="block text-sm font-medium text-gray-700">Phone Number</label>
                <InputText id="phoneNumber" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm" @bind-Value="bookingModel.PhoneNumber" />
                <ValidationMessage For="@(() => bookingModel.PhoneNumber)" />
            </div>

            <div class="mb-4">
                <label for="numberOfTickets" class="block text-sm font-medium text-gray-700">Number of Tickets</label>
                <InputNumber id="numberOfTickets" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm" @bind-Value="bookingModel.NumberOfTickets" />
                <ValidationMessage For="@(() => bookingModel.NumberOfTickets)" />
            </div>

            <div class="mb-4">
                <button type="submit" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    Book Now
                </button>
                <button type="button" @onclick="CancelBooking" class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-100">
                    Cancel
                </button>
            </div>
        </div>
    </EditForm>

    <!-- Success Modal -->
    <div class="fixed inset-0 z-10 overflow-y-auto" style="display:@(showSuccessModal ? "block" : "none"); background-color: rgba(0, 0, 0, 0.5);" aria-hidden="true">
        <div class="flex items-center justify-center min-h-screen px-4 text-center sm:block sm:p-0">
            <div class="fixed inset-0 transition-opacity" aria-hidden="true">
                <div class="absolute inset-0 bg-gray-500 opacity-75"></div>
            </div>
            <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
            <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
                <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                    <div class="sm:flex sm:items-start">
                        <div class="mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-green-100 sm:mx-0 sm:h-10 sm:w-10">
                            <svg class="h-6 w-6 text-green-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                            </svg>
                        </div>
                        <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left">
                            <h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-title">Success</h3>
                            <div class="mt-2">
                                <p class="text-sm text-gray-500">Your booking was successful!</p>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                    <button type="button" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:ml-3 sm:w-auto sm:text-sm" @onclick="CloseSuccessModal">Close</button>
                </div>
            </div>
        </div>
    </div>

}

@code {
    [Parameter] public int EventId { get; set; }
    private BookingModel bookingModel = new();
    private EventModel eventDetails;
    private string errorMessage;
    private bool showSuccessModal = false;

    protected override async Task OnInitializedAsync()
    {
        // Fetch event details based on EventId
        eventDetails = await ApiService.GetEventByIdAsync(EventId);
    }

    private async Task HandleValidSubmit()
    {
        // Handle booking submission
        var response = await ApiService.BookEventAsync(EventId, bookingModel);

        if (response.IsSuccessStatusCode)
        {
            // Show success modal
            showSuccessModal = true;
        }
        else
        {
            // Handle error
            errorMessage = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Error booking event: {errorMessage}");
            // Optionally display errorMessage to the user
        }
    }

    private void CancelBooking()
    {
        NavigationManager.NavigateTo("/events");
    }

    private void CloseSuccessModal()
    {
        showSuccessModal = false;
        NavigationManager.NavigateTo("/events");
    }
}
