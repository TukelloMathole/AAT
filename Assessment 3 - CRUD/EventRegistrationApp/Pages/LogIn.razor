@page "/login"
@inject HttpClient HttpClient
@inject NavigationManager Navigation
@inject IJSRuntime js
@using System.ComponentModel.DataAnnotations;

<div class="flex flex-col items-center justify-center h-screen dark">
    <div class="w-full max-w-md bg-gray-800 rounded-lg shadow-md p-6">
        <h2 class="text-2xl font-bold text-gray-200 mb-4">Login</h2>
        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="flex flex-col">
                <InputText placeholder="Email address" class="bg-gray-700 text-gray-200 border-0 rounded-md p-2 mb-4 focus:bg-gray-600 focus:outline-none focus:ring-1 focus:ring-blue-500 transition ease-in-out duration-150" @bind-Value="loginModel.Email" type="email" />
                <InputText placeholder="Password" class="bg-gray-700 text-gray-200 border-0 rounded-md p-2 mb-4 focus:bg-gray-600 focus:outline-none focus:ring-1 focus:ring-blue-500 transition ease-in-out duration-150" @bind-Value="loginModel.Password" type="password" />
                <div class="flex items-center justify-between flex-wrap">
                    <label class="text-sm text-gray-200 cursor-pointer" for="remember-me">
                        <InputCheckbox class="mr-2" id="remember-me" @bind-Value="loginModel.RememberMe" />
                        Remember me
                    </label>
                    <a class="text-sm text-blue-500 hover:underline mb-0.5" href="#">Forgot password?</a>
                    <p class="text-white mt-4"> Don't have an account? <a class="text-sm text-blue-500 -200 hover:underline mt-4" href="#">Signup</a></p>
                </div>
                <button class="bg-gradient-to-r from-indigo-500 to-blue-500 text-white font-bold py-2 px-4 rounded-md mt-4 hover:bg-indigo-600 hover:to-blue-600 transition ease-in-out duration-150" type="submit">Login</button>
            </div>
        </EditForm>
    </div>
</div>

<!-- Success Modal -->
<div class="fixed inset-0 z-10 overflow-y-auto" style="display:@(showSuccessModal ? "block" : "none"); background-color: rgba(0, 0, 0, 0.5);" aria-hidden="true">
    <div class="flex items-center justify-center min-h-screen px-4 text-center sm:block sm:p-0">
        <div class="fixed inset-0 transition-opacity" aria-hidden="true">
            <div class="absolute inset-0 bg-gray-500 opacity-75"></div>
        </div>
        <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
        <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
            <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div class="sm:flex sm:items-start">
                    <div class="mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-green-100 sm:mx-0 sm:h-10 sm:w-10">
                        <svg class="h-6 w-6 text-green-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                        </svg>
                    </div>
                    <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left">
                        <h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-title">Success</h3>
                        <div class="mt-2">
                            <p class="text-sm text-gray-500">You have logged in successfully!</p>
                        </div>
                    </div>
                </div>
            </div>
            <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                <button type="button" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:ml-3 sm:w-auto sm:text-sm" @onclick="CloseSuccessModal">Close</button>
            </div>
        </div>
    </div>
</div>


@code {
    private LoginModel loginModel = new LoginModel();
    private bool showSuccessModal = false;

    private async Task HandleLogin()
    {
        var response = await HttpClient.PostAsJsonAsync("https://localhost:7018/api/auth/login", loginModel);
        if (response.IsSuccessStatusCode)
        {
            var token = await response.Content.ReadAsStringAsync();
            // Store token in local storage
            await js.InvokeVoidAsync("localStorage.setItem", "authToken", token);
            // Show success modal
            showSuccessModal = true;
        }
        else
        {
            // Handle login failure (e.g., show an error message)
            Console.WriteLine("Login failed. Please check your credentials.");
        }
    }

    private void CloseSuccessModal()
    {
        showSuccessModal = false;
        Navigation.NavigateTo("/admin", true);
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email address is required.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required.")]
        public string Password { get; set; } = string.Empty;

        public bool RememberMe { get; set; }
    }
}
