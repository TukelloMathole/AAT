@page "/events"
@using EventRegistrationApp.Models
@inject ApiService ApiService
@inject NavigationManager Navigation

<section class="bg-gray-50 py-8">
    <h2 class="text-4xl font-bold text-center mb-10 text-gray-800">Upcoming Events</h2>

    <div class="mb-8 flex justify-center gap-6">
        <!-- Search Bar -->
        <input type="text" placeholder="Search events..." class="px-4 py-2 border border-gray-300 rounded-lg shadow-sm text-sm" @bind="searchQuery" @oninput="OnSearchQueryChanged" />

        <!-- Filter Dropdown -->
        <select class="px-4 py-2 border border-gray-300 rounded-lg shadow-sm text-sm" @bind="selectedCategory">
            <option value="">All Categories</option>
            @foreach (var category in Categories)
            {
                <option value="@category.CategoryName">@category.CategoryName</option>
            }
        </select>
    </div>

    <div class="max-w-5xl mx-auto grid gap-8 grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5">
        @if (events == null)
        {
            <p class="text-center"><em>Loading...</em></p>
        }
        else if (FilteredEvents.Any() == false)
        {
            <p class="text-center"><em>No upcoming events</em></p>
        }
        else
        {
            @foreach (var eventItem in FilteredEvents)
            {
                <div class="bg-white shadow-md rounded-lg overflow-hidden transition-transform transform hover:scale-105 p-6 flex flex-col">
                    <!-- Uncomment if you have images -->
                    <!-- <img src="@eventItem.Image" alt="@eventItem.EventName" class="w-full h-40 object-cover mb-4"> -->
                    <div class="flex flex-col flex-grow">
                        <h3 class="text-xl font-semibold mb-2">@eventItem.EventName</h3>
                        <p class="text-gray-600 mb-2">Date: @eventItem.EventDate.ToString("d MMM yyyy")</p>
                        <p class="text-gray-600 mb-2">Location: @eventItem.Location</p>
                        <p class="text-gray-600 mb-2">Time: @eventItem.EventTime</p>
                        <p class="text-gray-600 mb-2">Available Seats: @eventItem.AvailableSeats</p>
                        <p class="text-gray-700 flex-grow text-sm mb-4">@eventItem.Description</p>
                        <button @onclick="() => BookEvent(eventItem.EventId)" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition duration-150 ease-in-out">
                            Book Now
                        </button>
                    </div>
                </div>
            }
        }
    </div>
</section>



@code {
    private List<MyDataType> events = new();
    private string searchQuery = "";
    private string selectedCategory = "";
    private List<CategoryModel> Categories = new();
    private CancellationTokenSource debounceCancellationTokenSource = new();

    private IEnumerable<MyDataType> FilteredEvents =>
        events.Where(e => (string.IsNullOrEmpty(selectedCategory) || e.Category == selectedCategory) &&
                          (string.IsNullOrEmpty(searchQuery) ||
                           e.EventName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                           e.EventDate.ToString("d MMM yyyy").Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                           e.Location.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                           e.EventTime.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                           e.AvailableSeats.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                           e.Description.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)));

    protected override async Task OnInitializedAsync()
    {
        // Fetch events and categories
        events = await ApiService.GetDataAsync();
        Categories = await ApiService.GetCategoriesAsync();
    }

    private async Task OnSearchQueryChanged(ChangeEventArgs e)
    {
        searchQuery = e.Value.ToString();

        // Cancel previous debounce task
        debounceCancellationTokenSource.Cancel();
        debounceCancellationTokenSource.Dispose();
        debounceCancellationTokenSource = new CancellationTokenSource();

        var token = debounceCancellationTokenSource.Token;

        try
        {
            // Delay before applying the search filter
            await Task.Delay(300, token);
            StateHasChanged();
        }
        catch (TaskCanceledException)
        {
            // Task was canceled, no action needed
        }
    }

    private async Task BookEvent(int eventId)
    {
        // Redirect to booking page with the eventId
        Navigation.NavigateTo($"/book-event/{eventId}");
    }
}
