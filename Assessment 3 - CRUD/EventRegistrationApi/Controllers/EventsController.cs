using Microsoft.AspNetCore.Mvc;
using EventRegistrationApi.Models;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore;
using System.IO;

namespace EventRegistrationApi.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class EventsController : ControllerBase
    {
        private readonly AppDbContext _context;

        public EventsController(AppDbContext context)
        {
            _context = context;
        }

        [HttpGet]
        public async Task<ActionResult<IEnumerable<Event>>> GetEvents()
        {
            var events = await _context.Events.ToListAsync();
            return Ok(events);
        }

        [HttpGet("{id}")]
        public async Task<ActionResult<Event>> GetEvent(int id)
        {
            var @event = await _context.Events.FindAsync(id);

            if (@event == null)
            {
                return NotFound();
            }

            return Ok(@event);
        }

        [HttpPost]
        public async Task<IActionResult> CreateEvent([FromForm] CreateEventDto dto)
        {
            // Log the beginning of the request
            Console.WriteLine("Received CreateEvent request");

            // Check if the model state is valid
            if (!ModelState.IsValid)
            {
                Console.WriteLine("Model state is not valid:");
                foreach (var error in ModelState.Values.SelectMany(v => v.Errors))
                {
                    Console.WriteLine($" - {error.ErrorMessage}");
                }
                return BadRequest(ModelState);
            }

            // Log details from the DTO
            Console.WriteLine("Event Name: " + dto.EventName);
            Console.WriteLine("Event Date: " + dto.EventDate.ToString("yyyy-MM-ddTHH:mm:ss"));
            Console.WriteLine("Location: " + dto.Location);
            Console.WriteLine("Event Time: " + dto.EventTime);
            Console.WriteLine("Available Seats: " + dto.AvailableSeats);
            Console.WriteLine("Description: " + dto.Description);
            Console.WriteLine("Category: " + dto.Category);

            var newEvent = new Event
            {
                EventName = dto.EventName,
                EventDate = dto.EventDate,
                Location = dto.Location,
                EventTime = dto.EventTime,
                AvailableSeats = dto.AvailableSeats,
                Description = dto.Description,
                Category = dto.Category,
            };

            // Log the new event details
            Console.WriteLine("Creating Event:");
            Console.WriteLine(" - Event ID: " + newEvent.EventId); // EventId will be generated by the database
            Console.WriteLine(" - Event Name: " + newEvent.EventName);
            Console.WriteLine(" - Event Date: " + newEvent.EventDate.ToString("yyyy-MM-ddTHH:mm:ss"));
            Console.WriteLine(" - Location: " + newEvent.Location);
            Console.WriteLine(" - Event Time: " + newEvent.EventTime);
            Console.WriteLine(" - Available Seats: " + newEvent.AvailableSeats);
            Console.WriteLine(" - Description: " + newEvent.Description);
            Console.WriteLine(" - Category: " + newEvent.Category);

            // Add the new event to the database
            _context.Events.Add(newEvent);
            await _context.SaveChangesAsync();

            // Log the successful creation
            Console.WriteLine("Event created successfully with ID: " + newEvent.EventId);

            // Return the created event
            return CreatedAtAction(nameof(GetEvent), new { id = newEvent.EventId }, newEvent);
        }

        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateEvent(int id, [FromForm] CreateEventDto dto)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var @event = await _context.Events.FindAsync(id);
            if (@event == null)
            {
                return NotFound();
            }

            // Log the dto data
            Console.WriteLine($"EventName: {dto.EventName}");
            Console.WriteLine($"EventDate: {dto.EventDate}");
            Console.WriteLine($"Location: {dto.Location}");
            Console.WriteLine($"EventTime: {dto.EventTime}");
            Console.WriteLine($"AvailableSeats: {dto.AvailableSeats}");
            Console.WriteLine($"Description: {dto.Description}");
            Console.WriteLine($"Category: {dto.Category}");

            @event.EventName = dto.EventName;
            @event.EventDate = dto.EventDate;
            @event.Location = dto.Location;
            @event.EventTime = dto.EventTime;
            @event.AvailableSeats = dto.AvailableSeats;
            @event.Description = dto.Description;
            @event.Category = dto.Category;

            _context.Entry(@event).State = EntityState.Modified;
            await _context.SaveChangesAsync();

            return Ok(@event);
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteEvent(int id)
        {
            var @event = await _context.Events.FindAsync(id);
            if (@event == null)
            {
                return NotFound();
            }

            _context.Events.Remove(@event);
            await _context.SaveChangesAsync();

            return Ok();
        }
    }
}
